{"ast":null,"code":"'use strict';\n\nconst fs = require('graceful-fs');\n\nconst path = require('path');\n\nconst copy = require('../copy').copy;\n\nconst remove = require('../remove').remove;\n\nconst mkdirp = require('../mkdirs').mkdirp;\n\nconst pathExists = require('../path-exists').pathExists;\n\nconst stat = require('../util/stat');\n\nfunction move(src, dest, opts, cb) {\n  if (typeof opts === 'function') {\n    cb = opts;\n    opts = {};\n  }\n\n  opts = opts || {};\n  const overwrite = opts.overwrite || opts.clobber || false;\n  stat.checkPaths(src, dest, 'move', opts, (err, stats) => {\n    if (err) return cb(err);\n    const {\n      srcStat,\n      isChangingCase = false\n    } = stats;\n    stat.checkParentPaths(src, srcStat, dest, 'move', err => {\n      if (err) return cb(err);\n      if (isParentRoot(dest)) return doRename(src, dest, overwrite, isChangingCase, cb);\n      mkdirp(path.dirname(dest), err => {\n        if (err) return cb(err);\n        return doRename(src, dest, overwrite, isChangingCase, cb);\n      });\n    });\n  });\n}\n\nfunction isParentRoot(dest) {\n  const parent = path.dirname(dest);\n  const parsedPath = path.parse(parent);\n  return parsedPath.root === parent;\n}\n\nfunction doRename(src, dest, overwrite, isChangingCase, cb) {\n  if (isChangingCase) return rename(src, dest, overwrite, cb);\n\n  if (overwrite) {\n    return remove(dest, err => {\n      if (err) return cb(err);\n      return rename(src, dest, overwrite, cb);\n    });\n  }\n\n  pathExists(dest, (err, destExists) => {\n    if (err) return cb(err);\n    if (destExists) return cb(new Error('dest already exists.'));\n    return rename(src, dest, overwrite, cb);\n  });\n}\n\nfunction rename(src, dest, overwrite, cb) {\n  fs.rename(src, dest, err => {\n    if (!err) return cb();\n    if (err.code !== 'EXDEV') return cb(err);\n    return moveAcrossDevice(src, dest, overwrite, cb);\n  });\n}\n\nfunction moveAcrossDevice(src, dest, overwrite, cb) {\n  const opts = {\n    overwrite,\n    errorOnExist: true\n  };\n  copy(src, dest, opts, err => {\n    if (err) return cb(err);\n    return remove(src, cb);\n  });\n}\n\nmodule.exports = move;","map":{"version":3,"names":["fs","require","path","copy","remove","mkdirp","pathExists","stat","move","src","dest","opts","cb","overwrite","clobber","checkPaths","err","stats","srcStat","isChangingCase","checkParentPaths","isParentRoot","doRename","dirname","parent","parsedPath","parse","root","rename","destExists","Error","code","moveAcrossDevice","errorOnExist","module","exports"],"sources":["/Users/le-taoli/emotiondetecttemp/front/node_modules/fs-extra/lib/move/move.js"],"sourcesContent":["'use strict'\n\nconst fs = require('graceful-fs')\nconst path = require('path')\nconst copy = require('../copy').copy\nconst remove = require('../remove').remove\nconst mkdirp = require('../mkdirs').mkdirp\nconst pathExists = require('../path-exists').pathExists\nconst stat = require('../util/stat')\n\nfunction move (src, dest, opts, cb) {\n  if (typeof opts === 'function') {\n    cb = opts\n    opts = {}\n  }\n\n  opts = opts || {}\n\n  const overwrite = opts.overwrite || opts.clobber || false\n\n  stat.checkPaths(src, dest, 'move', opts, (err, stats) => {\n    if (err) return cb(err)\n    const { srcStat, isChangingCase = false } = stats\n    stat.checkParentPaths(src, srcStat, dest, 'move', err => {\n      if (err) return cb(err)\n      if (isParentRoot(dest)) return doRename(src, dest, overwrite, isChangingCase, cb)\n      mkdirp(path.dirname(dest), err => {\n        if (err) return cb(err)\n        return doRename(src, dest, overwrite, isChangingCase, cb)\n      })\n    })\n  })\n}\n\nfunction isParentRoot (dest) {\n  const parent = path.dirname(dest)\n  const parsedPath = path.parse(parent)\n  return parsedPath.root === parent\n}\n\nfunction doRename (src, dest, overwrite, isChangingCase, cb) {\n  if (isChangingCase) return rename(src, dest, overwrite, cb)\n  if (overwrite) {\n    return remove(dest, err => {\n      if (err) return cb(err)\n      return rename(src, dest, overwrite, cb)\n    })\n  }\n  pathExists(dest, (err, destExists) => {\n    if (err) return cb(err)\n    if (destExists) return cb(new Error('dest already exists.'))\n    return rename(src, dest, overwrite, cb)\n  })\n}\n\nfunction rename (src, dest, overwrite, cb) {\n  fs.rename(src, dest, err => {\n    if (!err) return cb()\n    if (err.code !== 'EXDEV') return cb(err)\n    return moveAcrossDevice(src, dest, overwrite, cb)\n  })\n}\n\nfunction moveAcrossDevice (src, dest, overwrite, cb) {\n  const opts = {\n    overwrite,\n    errorOnExist: true\n  }\n  copy(src, dest, opts, err => {\n    if (err) return cb(err)\n    return remove(src, cb)\n  })\n}\n\nmodule.exports = move\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}