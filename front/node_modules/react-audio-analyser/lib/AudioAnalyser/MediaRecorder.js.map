{"version":3,"sources":["../../src/component/AudioAnalyser/MediaRecorder.js"],"names":["convertWav","WebWorker","MediaRecorderFn","Target","constraints","audio","mp3Worker","Worker","props","startAudio","recorder","mediaRecorder","state","navigator","mediaDevices","getUserMedia","then","stream","recordAudio","catch","err","MediaRecorderClass","checkAndExecFn","errorCallback","resumeAudio","pauseAudio","pause","onpause","pauseCallback","audioCtx","suspend","stopAudio","audioType","audioOptions","includes","stop","onstop","audioStream2Blob","stopCallback","audioChunk","initCanvas","compatibility","window","AudioContext","webkitAudioContext","analyser","createAnalyser","type","cb","wavBlob","chunk","audioWav","fr","FileReader","readAsArrayBuffer","Blob","frOnload","e","buffer","target","result","decodeAudioData","data","DataView","onload","audioMp3","wavBuf","postMessage","cmd","config","bitRate","rawInput","onmessage","mp3Blob","buf","mediaSupported","audioBitsPerSecond","timeslice","mimeType","MediaRecorder","ondataavailable","event","onRecordCallback","push","resume","start","onstart","startCallback","onresume","initAudioAnalyser","onerror","renderCurve","source","createMediaStreamSource","connect","promisifiedOldGUM","webkitGetUserMedia","mozGetUserMedia","Promise","reject","Error","resolve","call","undefined","fn","isTypeSupported"],"mappings":"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","file":"MediaRecorder.js","sourcesContent":["/**\n * @author j_bleach 2018/8/18\n * @describe 媒体记录（包含开始，暂停，停止等媒体流及回调操作）\n * @param Target 被装饰类（AudioAnalyser）\n */\nimport convertWav from \"./audioConvertWav\";\nimport WebWorker from \"./mp3worker.js\";\n\nconst MediaRecorderFn = (Target) => {\n  const constraints = { audio: true };\n  const mp3Worker = new Worker(WebWorker);\n  return class MediaRecorderClass extends Target {\n    constructor(props) {\n      super(props);\n      MediaRecorderClass.compatibility();\n      this.audioChunk = []; // 音频信息存储对象\n      this.mediaRecorder = null; // 媒体记录对象\n      this.audioCtx = new (window.AudioContext || window.webkitAudioContext)(); // 音频上下文\n      this.analyser = this.audioCtx.createAnalyser();\n    }\n\n    /**\n     * @author j_bleach 2018/08/02 17:06\n     * @describe 浏览器navigator.mediaDevices兼容性处理\n     */\n    static compatibility() {\n      const promisifiedOldGUM = (constraints) => {\n        // First get ahold of getUserMedia, if present\n        const getUserMedia =\n          navigator.getUserMedia ||\n          navigator.webkitGetUserMedia ||\n          navigator.mozGetUserMedia;\n\n        // Some browsers just don't implement it - return a rejected promise with an error\n        // to keep a consistent interface\n        if (!getUserMedia) {\n          MediaRecorderClass.checkAndExecFn(\n            this.props ? this.props.errorCallback : null\n          );\n          return Promise.reject(\n            new Error(\"getUserMedia is not implemented in this browser\")\n          );\n        }\n        // Otherwise, wrap the call to the old navigator.getUserMedia with a Promise\n        return new Promise(function (resolve, reject) {\n          getUserMedia.call(navigator, constraints, resolve, reject);\n        });\n      };\n\n      // Older browsers might not implement mediaDevices at all, so we set an empty object first\n      if (navigator.mediaDevices === undefined) {\n        navigator.mediaDevices = {};\n      }\n\n      // Some browsers partially implement mediaDevices. We can't just assign an object\n      // with getUserMedia as it would overwrite existing properties.\n      // Here, we will just add the getUserMedia property if it's missing.\n      if (navigator.mediaDevices.getUserMedia === undefined) {\n        navigator.mediaDevices.getUserMedia = promisifiedOldGUM;\n      }\n    }\n\n    /**\n     * @author j_bleach 2018/8/19\n     * @describe 验证函数，如果存在即执行\n     * @param fn: function 被验证函数\n     * @param e: object 事件对象 event object\n     */\n    static checkAndExecFn(fn, e) {\n      typeof fn === \"function\" && fn(e);\n    }\n\n    /**\n     * @author j_bleach 2022/04/17\n     * @describe 兼容safari\n     * @returns mimeType\n     */\n    static mediaSupported() {\n      // safari used to not support this\n      // ...even if it supported media recorder\n      if (!MediaRecorder.isTypeSupported) {\n        return \"audio/mp4\";\n      } else if (MediaRecorder.isTypeSupported(\"audio/webm\")) {\n        return \"audio/webm\";\n      } else {\n        return \"audio/mp4\";\n      }\n    }\n\n    /**\n     * @author j_bleach 2018/8/19\n     * @describe 音频流转blob对象\n     * @param type: string 音频的mime-type\n     * @param cb: function 录音停止回调\n     */\n    audioStream2Blob(type, audioOptions, cb) {\n      let wavBlob = null;\n      const chunk = this.audioChunk;\n      const audioWav = () => {\n        let fr = new FileReader();\n        fr.readAsArrayBuffer(new Blob(chunk, { type }));\n        let frOnload = (e) => {\n          const buffer = e.target.result;\n          this.audioCtx.decodeAudioData(buffer).then((data) => {\n            wavBlob = new Blob([new DataView(convertWav(data, audioOptions))], {\n              type: \"audio/wav\",\n            });\n            MediaRecorderClass.checkAndExecFn(cb, wavBlob);\n          });\n        };\n        fr.onload = frOnload;\n      };\n      const audioMp3 = () => {\n        let fr = new FileReader();\n        fr.readAsArrayBuffer(new Blob(chunk, { type: \"audio/wav\" }));\n        let frOnload = (e) => {\n          const buffer = e.target.result;\n          this.audioCtx.decodeAudioData(buffer).then((data) => {\n            const wavBuf = convertWav(data, audioOptions);\n            mp3Worker.postMessage({\n              cmd: \"init\",\n              config: { bitRate: 128 },\n            });\n            mp3Worker.postMessage({ cmd: \"encode\", rawInput: wavBuf });\n            mp3Worker.postMessage({ cmd: \"finish\" });\n\n            mp3Worker.onmessage = (e) => {\n              if (e.data.cmd == \"end\") {\n                const mp3Blob = new Blob(e.data.buf, { type });\n                MediaRecorderClass.checkAndExecFn(cb, mp3Blob);\n              }\n            };\n          });\n        };\n        fr.onload = frOnload;\n      };\n      switch (type) {\n        case \"audio/webm\":\n        case \"audio/mp4\":\n          MediaRecorderClass.checkAndExecFn(\n            cb,\n            new Blob(chunk, { type: MediaRecorderClass.mediaSupported() })\n          );\n          break;\n        case \"audio/wav\":\n          audioWav();\n          break;\n        case \"audio/mp3\":\n          audioMp3();\n          break;\n        default:\n          return void 0;\n      }\n    }\n\n    /**\n     * @author j_bleach 2018/8/18\n     * @describe 开始录音\n     */\n    startAudio = () => {\n      const recorder = this.mediaRecorder;\n      if (!recorder || (recorder && recorder.state === \"inactive\")) {\n        navigator.mediaDevices\n          .getUserMedia(constraints)\n          .then((stream) => {\n            this.recordAudio(stream);\n          })\n          .catch((err) => {\n            MediaRecorderClass.checkAndExecFn(this.props.errorCallback, err);\n            // throw new Error(\"getUserMedia failed:\", err);\n          });\n        return false;\n      }\n      if (recorder && recorder.state === \"paused\") {\n        this.resumeAudio();\n      }\n    };\n    /**\n     * @author j_bleach 2018/8/19\n     * @describe 暂停录音\n     */\n    pauseAudio = () => {\n      const recorder = this.mediaRecorder;\n      if (recorder && recorder.state === \"recording\") {\n        recorder.pause();\n        recorder.onpause = () => {\n          MediaRecorderClass.checkAndExecFn(this.props.pauseCallback);\n        };\n        this.audioCtx.suspend();\n      }\n    };\n    /**\n     * @author j_bleach 2018/8/18\n     * @describe 停止录音\n     */\n    stopAudio = () => {\n      const { audioType, audioOptions } = this.props;\n      const recorder = this.mediaRecorder;\n      if (recorder && [\"recording\", \"paused\"].includes(recorder.state)) {\n        recorder.stop();\n        recorder.onstop = () => {\n          this.audioStream2Blob(\n            audioType,\n            audioOptions,\n            this.props.stopCallback\n          );\n          this.audioChunk = []; // 结束后，清空音频存储\n        };\n        this.audioCtx.suspend();\n        this.initCanvas();\n      }\n    };\n\n    /**\n     * @author j_bleach 2018/8/18\n     * @describe mediaRecorder音频记录\n     * @param stream: binary data 音频流\n     */\n    recordAudio(stream) {\n      const { audioBitsPerSecond, timeslice } = this.props;\n      const mimeType = MediaRecorderClass.mediaSupported();\n      this.mediaRecorder = new MediaRecorder(stream, {\n        audioBitsPerSecond,\n        mimeType,\n      });\n      this.mediaRecorder.ondataavailable = (event) => {\n        MediaRecorderClass.checkAndExecFn(\n          this.props.onRecordCallback,\n          event.data\n        );\n        this.audioChunk.push(event.data);\n      };\n      this.audioCtx.resume();\n      this.mediaRecorder.start(timeslice);\n      this.mediaRecorder.onstart = (e) => {\n        MediaRecorderClass.checkAndExecFn(this.props.startCallback, e);\n      };\n      this.mediaRecorder.onresume = (e) => {\n        this.initAudioAnalyser(stream);\n        MediaRecorderClass.checkAndExecFn(this.props.startCallback, e);\n      };\n      this.mediaRecorder.onerror = (e) => {\n        MediaRecorderClass.checkAndExecFn(this.props.errorCallback, e);\n      };\n      this.initAudioAnalyser(stream);\n      this.renderCurve();\n    }\n\n    /**\n     * @author j_bleach 2019/10/31\n     * @describe 重置音频上下文（解决谷歌浏览器 音频数组链接断开问题）\n     */\n\n    initAudioAnalyser(stream) {\n      this.analyser = this.audioCtx.createAnalyser();\n      const source = this.audioCtx.createMediaStreamSource(stream);\n      source.connect(this.analyser);\n    }\n\n    /**\n     * @author j_bleach 2018/8/19\n     * @describe 恢复录音\n     */\n    resumeAudio() {\n      this.audioCtx.resume();\n      this.mediaRecorder.resume();\n    }\n  };\n};\nexport default MediaRecorderFn;\n"]}